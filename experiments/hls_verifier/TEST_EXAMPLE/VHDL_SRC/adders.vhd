-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.1
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity adders is
port (
    clk : IN STD_LOGIC;
    rst : IN STD_LOGIC;
    start : IN STD_LOGIC;
    done : OUT STD_LOGIC;
    idle : OUT STD_LOGIC;

    A_din : IN STD_LOGIC_VECTOR (31 downto 0);
    B_din : IN STD_LOGIC_VECTOR (31 downto 0);
    
    C_address : OUT STD_LOGIC_VECTOR (1 downto 0);
    C_ce : OUT STD_LOGIC;
    C_din : IN STD_LOGIC_VECTOR (31 downto 0);
    
    D_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
    D_ce : OUT STD_LOGIC; 
    D_we : OUT STD_LOGIC;
    
    E_address : OUT STD_LOGIC_VECTOR (1 downto 0);
    E_ce : OUT STD_LOGIC;
    E_we : OUT STD_LOGIC;
    E_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
    
    F_din : IN STD_LOGIC_VECTOR (31 downto 0);
    F_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
    F_ce : OUT STD_LOGIC;
    F_we : OUT STD_LOGIC;
    
    G_address : OUT STD_LOGIC_VECTOR (1 downto 0);
    G_ce : OUT STD_LOGIC;
    G_we : OUT STD_LOGIC;
    G_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
    G_din : IN STD_LOGIC_VECTOR (31 downto 0);
    hls_return_dout : OUT STD_LOGIC_VECTOR (31 downto 0) ;
    hls_return_ce : OUT STD_LOGIC;
    hls_return_we : OUT STD_LOGIC);
end entity adders;


architecture behav of adders is 

   signal ap_clk: STD_LOGIC;
   signal ap_rst : STD_LOGIC;
   signal ap_start : STD_LOGIC;
   signal ap_done : STD_LOGIC;
   signal ap_idle : STD_LOGIC;
   signal ap_ready : STD_LOGIC;
   signal A : STD_LOGIC_VECTOR (31 downto 0);
   signal B : STD_LOGIC_VECTOR (31 downto 0);
   signal C_address0 : STD_LOGIC_VECTOR (1 downto 0);
   signal C_ce0 : STD_LOGIC;
   signal C_q0 : STD_LOGIC_VECTOR (31 downto 0);
   signal D : STD_LOGIC_VECTOR (31 downto 0);
   signal D_ap_vld : STD_LOGIC;
   signal E_address0 : STD_LOGIC_VECTOR (1 downto 0);
   signal E_ce0 : STD_LOGIC;
   signal E_we0 : STD_LOGIC;
   signal E_d0 : STD_LOGIC_VECTOR (31 downto 0);
   signal F_i : STD_LOGIC_VECTOR (31 downto 0);
   signal F_o : STD_LOGIC_VECTOR (31 downto 0);
   signal F_o_ap_vld : STD_LOGIC;
   signal G_address0 : STD_LOGIC_VECTOR (1 downto 0);
   signal G_ce0 : STD_LOGIC;
   signal G_we0 : STD_LOGIC;
   signal G_d0 : STD_LOGIC_VECTOR (31 downto 0);
   signal G_q0 : STD_LOGIC_VECTOR (31 downto 0);
   signal ap_return : STD_LOGIC_VECTOR (31 downto 0);



    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "adders,hls_ip_2017_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a75tlftg256-2l,HLS_INPUT_CLOCK=3.250000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.021500,HLS_SYN_LAT=47,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=990,HLS_SYN_LUT=346}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (15 downto 0) := "0000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (15 downto 0) := "0000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (15 downto 0) := "0000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (15 downto 0) := "0000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (15 downto 0) := "0000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (15 downto 0) := "0000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (15 downto 0) := "0001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (15 downto 0) := "0010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (15 downto 0) := "0100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal C_load_reg_203 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_fu_139_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal D_assign_reg_216 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal i_2_fu_151_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_2_reg_224 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_fu_157_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_reg_229 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond1_fu_145_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal C_load_1_reg_244 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_fu_168_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_reg_249 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal i_3_fu_178_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_3_reg_257 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal G_addr_reg_262 : STD_LOGIC_VECTOR (1 downto 0);
    signal exitcond_fu_172_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal G_load_reg_272 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal grp_fu_194_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_reg_277 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal i_reg_117 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal i_1_reg_128 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal tmp_4_fu_184_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_162_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal grp_fu_189_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (15 downto 0);

    component adders_add_32ns_3bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin 
      
   ap_clk <= clk;
   ap_rst   <= rst;
   ap_start <= start;
   done  <= ap_done;
   idle <= ap_idle;
   
   A <= A_din;
   B <= B_din;
   
   C_address <= C_address0;
   C_ce <= C_ce0;
   C_q0 <= C_din;
   
   D_dout <= D;
   D_ce <= D_ap_vld;
   D_we <= D_ap_vld;
   
   E_address <= E_address0;
   E_ce <= E_ce0;
   E_we <= E_we0;
   E_dout <= E_d0;
   
   F_i <= F_din;
   F_dout <= F_o; 
   F_ce <= F_o_ap_vld;
   F_we <= F_o_ap_vld;
    
   G_address <= G_address0;
   G_ce <= G_ce0; 
   G_we <= G_we0;
   G_dout <= G_d0;
   G_q0 <= G_din;
    
   hls_return_dout <= ap_return;
   hls_return_ce <= '1'; 
   hls_return_we <= '1';

    adders_add_32ns_3bkb_U1 : component adders_add_32ns_3bkb
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => C_load_reg_203,
        din1 => A,
        ce => ap_const_logic_1,
        dout => grp_fu_139_p2);

    adders_add_32ns_3bkb_U2 : component adders_add_32ns_3bkb
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => C_load_reg_203,
        din1 => F_i,
        ce => ap_const_logic_1,
        dout => grp_fu_162_p2);

    adders_add_32ns_3bkb_U3 : component adders_add_32ns_3bkb
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => C_load_1_reg_244,
        din1 => A,
        ce => ap_const_logic_1,
        dout => grp_fu_168_p2);

    adders_add_32ns_3bkb_U4 : component adders_add_32ns_3bkb
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => B,
        din1 => D_assign_reg_216,
        ce => ap_const_logic_1,
        dout => grp_fu_189_p2);

    adders_add_32ns_3bkb_U5 : component adders_add_32ns_3bkb
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => G_load_reg_272,
        din1 => A,
        ce => ap_const_logic_1,
        dout => grp_fu_194_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_1_reg_128_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                i_1_reg_128 <= i_3_reg_257;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                i_1_reg_128 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i_reg_117_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                i_reg_117 <= i_2_reg_224;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                i_reg_117 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                C_load_1_reg_244 <= C_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                C_load_reg_203 <= C_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                D_assign_reg_216 <= grp_fu_139_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) and (ap_const_lv1_0 = exitcond_fu_172_p2))) then
                G_addr_reg_262 <= tmp_4_fu_184_p1(2 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                G_load_reg_272 <= G_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                i_2_reg_224 <= i_2_fu_151_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                i_3_reg_257 <= i_3_fu_178_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                tmp_1_reg_249 <= grp_fu_168_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                tmp_5_reg_277 <= grp_fu_194_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond1_fu_145_p2 = ap_const_lv1_0))) then
                    tmp_reg_229(2 downto 0) <= tmp_fu_157_p1(2 downto 0);
            end if;
        end if;
    end process;
    tmp_reg_229(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state5, exitcond1_fu_145_p2, ap_CS_fsm_state11, exitcond_fu_172_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond1_fu_145_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and (ap_const_lv1_1 = exitcond_fu_172_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXX";
        end case;
    end process;

    C_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state5, tmp_fu_157_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            C_address0 <= tmp_fu_157_p1(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            C_address0 <= ap_const_lv64_0(2 - 1 downto 0);
        else 
            C_address0 <= "XX";
        end if; 
    end process;


    C_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state5)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            C_ce0 <= ap_const_logic_1;
        else 
            C_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    D <= grp_fu_139_p2;

    D_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            D_ap_vld <= ap_const_logic_1;
        else 
            D_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    E_address0 <= tmp_reg_229(2 - 1 downto 0);

    E_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            E_ce0 <= ap_const_logic_1;
        else 
            E_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    E_d0 <= tmp_1_reg_249;

    E_we0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            E_we0 <= ap_const_logic_1;
        else 
            E_we0 <= ap_const_logic_0;
        end if; 
    end process;

    F_o <= grp_fu_162_p2;

    F_o_ap_vld_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            F_o_ap_vld <= ap_const_logic_1;
        else 
            F_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    G_address0_assign_proc : process(ap_CS_fsm_state11, G_addr_reg_262, ap_CS_fsm_state15, tmp_4_fu_184_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            G_address0 <= G_addr_reg_262;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            G_address0 <= tmp_4_fu_184_p1(2 - 1 downto 0);
        else 
            G_address0 <= "XX";
        end if; 
    end process;


    G_ce0_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            G_ce0 <= ap_const_logic_1;
        else 
            G_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    G_d0 <= tmp_5_reg_277;

    G_we0_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            G_we0 <= ap_const_logic_1;
        else 
            G_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= grp_fu_189_p2;
    exitcond1_fu_145_p2 <= "1" when (i_reg_117 = ap_const_lv3_4) else "0";
    exitcond_fu_172_p2 <= "1" when (i_1_reg_128 = ap_const_lv3_4) else "0";
    i_2_fu_151_p2 <= std_logic_vector(unsigned(i_reg_117) + unsigned(ap_const_lv3_1));
    i_3_fu_178_p2 <= std_logic_vector(unsigned(i_1_reg_128) + unsigned(ap_const_lv3_1));
    tmp_4_fu_184_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_128),64));
    tmp_fu_157_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_117),64));
end behav;
