

---------------------------------------------------
Node name is "phi_16" of type type = "Merge in BasicBlock number bbID= 4 has 2 predecessors

Considering producer node name "mul_14" of type type = "Operator in BasicBlock number bbID= 3
Found 1 paths
Printing path number 0 details
1 -> 2 -> 3 -> 6 -> 

 Printing all the piers of that path!
2, 


 The trueSuccBB of this pier BB is bbID= 4 and the falseSuccBB of this pier BB is bbID= 3

Printing the sum of products from START to that virtualBB!
not C2 &  + 


Considering producer node name "branch_6" of type type = "Branch in BasicBlock number bbID= 2
Found 1 paths
Printing path number 0 details
1 -> 2 -> 6 -> 

 Printing all the piers of that path!
2, 


 The trueSuccBB of this pier BB is bbID= 4 and the falseSuccBB of this pier BB is bbID= 3

Printing the sum of products from START to that virtualBB!
C2 &  + 

The current Merge node the following functions: 
	f0 = not C2 &  + 
	f1 = C2 &  + 
	
	Printing the details of the Merge after modifying the functions to be the correct f0 and f1 onlyy!!
f0 = not C2 &  + 
	f1 = C2 &  + 
	
Hii from inside get_binary_sop!

Number of bits is = 1 and Number of truth table rows is = 2

Number of dont-care entries is = 0


**************************************************


	 Printing the minterms_only_in_binary expression 
1

	 Printing the minterms_plus_dont_cares_in_binary expression 
1


**************************************************


Hii from inside the Quine_McCluskey solver!

Printing the prime implicants table in its first state:
0)  
1)  1, 


Printing the combined prime implicants:
0)  1


Printing the prime implicant chart
1	

Bye, leaving the Quine_McCluskey solver!


 The possible functions for SEL_ALWAYS:
1 + 




SEL_ALWAYS = C1 &  + 


Hii from inside the Quine_McCluskey solver!

Printing the prime implicants table in its first state:
0)  
1)  


Printing the combined prime implicants:


Printing the prime implicant chart

Bye, leaving the Quine_McCluskey solver!


 The possible functions for SEL_NOTOKEN:



